AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Amazon Elasticsearch Service (ES) with fine-grained access control (FGAC).

Parameters:

  DeploymentType:
    Description: The environment type
    Type: String
    Default: development
    AllowedValues:
      - development
      - production

  DomainName:
    Description: Elasticsearch domain name
    Type: String
    Default: fgactest
    AllowedPattern: '[a-z0-9-]{3,28}'
    
  ZoneAwarenessEnabled:
    Description: Zone Awareness Enabled
    Type: String
    AllowedValues:
    - true
    - false    
    Default: false
  
  ElasticsearchVersion:
    Description: Elasticsearch version
    Type: String
    Default: 7.7
    AllowedValues:
      - 7.7 
  MasterUserName:
    Description: Master user name for Kibana
    Type: String
    Default: admin_
  MasterUserPassword:
    Description: Master user password for Kibana
    Type: String
    Default: Enjoyit2020$
  MasterNodeCount:
    Description: Number of ES master nodes
    Type: Number
    Default: 3
  MasterInstanceType:
    Description: Instance type of ES master nodes
    Type: String
    Default: c5.large.elasticsearch
    AllowedValues:
      - c5.large.elasticsearch
      - c5.xlarge.elasticsearch
      - c5.2xlarge.elasticsearch
      - c5.4xlarge.elasticsearch
      - c5.9xlarge.elasticsearch
      - c5.18xlarge.elasticsearch
      - i3.large.elasticsearch
      - i3.xlarge.elasticsearch
      - i3.2xlarge.elasticsearch
      - i3.4xlarge.elasticsearch
      - i3.8xlarge.elasticsearch
      - i3.16xlarge.elasticsearch
      - m5.large.elasticsearch
      - m5.xlarge.elasticsearch
      - m5.2xlarge.elasticsearch
      - m5.4xlarge.elasticsearch
      - m5.12xlarge.elasticsearch
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.12xlarge.elasticsearch
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - c4.large.elasticsearch
      - c4.xlarge.elasticsearch
      - c4.2xlarge.elasticsearch
      - c4.4xlarge.elasticsearch
      - c4.8xlarge.elasticsearch
      - i2.xlarge.elasticsearch
      - i2.2xlarge.elasticsearch
      - m4.large.elasticsearch
      - m4.xlarge.elasticsearch
      - m4.2xlarge.elasticsearch
      - m4.4xlarge.elasticsearch
      - m4.10xlarge.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
      - r4.2xlarge.elasticsearch
      - r4.4xlarge.elasticsearch
      - r4.8xlarge.elasticsearch
      - r4.16xlarge.elasticsearch
      - m3.medium.elasticsearch
      - m3.large.elasticsearch
      - m3.xlarge.elasticsearch
      - m3.2xlarge.elasticsearch
      - r3.large.elasticsearch
      - r3.xlarge.elasticsearch
      - r3.2xlarge.elasticsearch
      - r3.4xlarge.elasticsearch
      - r3.8xlarge.elasticsearch
  DataNodeCount:
    Description: Number of ES data nodes
    Type: Number
    Default: 1
  DataInstanceType:
    Description: Instance type of ES data nodes
    Type: String
    Default: c5.large.elasticsearch
    AllowedValues:
      - c5.large.elasticsearch
      - c5.xlarge.elasticsearch
      - c5.2xlarge.elasticsearch
      - c5.4xlarge.elasticsearch
      - c5.9xlarge.elasticsearch
      - c5.18xlarge.elasticsearch
      - i3.large.elasticsearch
      - i3.xlarge.elasticsearch
      - i3.2xlarge.elasticsearch
      - i3.4xlarge.elasticsearch
      - i3.8xlarge.elasticsearch
      - i3.16xlarge.elasticsearch
      - m5.large.elasticsearch
      - m5.xlarge.elasticsearch
      - m5.2xlarge.elasticsearch
      - m5.4xlarge.elasticsearch
      - m5.12xlarge.elasticsearch
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.12xlarge.elasticsearch
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - c4.large.elasticsearch
      - c4.xlarge.elasticsearch
      - c4.2xlarge.elasticsearch
      - c4.4xlarge.elasticsearch
      - c4.8xlarge.elasticsearch
      - i2.xlarge.elasticsearch
      - i2.2xlarge.elasticsearch
      - m4.large.elasticsearch
      - m4.xlarge.elasticsearch
      - m4.2xlarge.elasticsearch
      - m4.4xlarge.elasticsearch
      - m4.10xlarge.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
      - r4.2xlarge.elasticsearch
      - r4.4xlarge.elasticsearch
      - r4.8xlarge.elasticsearch
      - r4.16xlarge.elasticsearch
      - m3.medium.elasticsearch
      - m3.large.elasticsearch
      - m3.xlarge.elasticsearch
      - m3.2xlarge.elasticsearch
      - r3.large.elasticsearch
      - r3.xlarge.elasticsearch
      - r3.2xlarge.elasticsearch
      - r3.4xlarge.elasticsearch
      - r3.8xlarge.elasticsearch
  EBSVolumeSize:
    Description: Size (in GiB) of the EBS volume for each data node
    Type: Number
    Default: 10  
    
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: CreateAESWithFGAC
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'es:*'
                  - 'kms:List*'
                  - 'kms:Describe*'
                  - 'kms:CreateGrant'
                  - 'iam:PassRole'
                Resource: '*'

  CustomElasticsearchDomain: 
    Type: Custom::ElasticsearchDomain
    Properties:
      ServiceToken: !GetAtt 
        - CustomElasticsearchDomainFunction
        - Arn
      dName: !Ref DomainName
      version: !Ref ElasticsearchVersion
      mNodeCnt: !Ref MasterNodeCount
      mInstanceType: !Ref MasterInstanceType
      dNodeCnt: !Ref DataNodeCount
      dInstanceType: !Ref DataInstanceType
      ebsVolSize: !Ref EBSVolumeSize
      mUserName: !Ref MasterUserName
      mUserPwd: !Ref MasterUserPassword
      zAwarenessEnabled: !Ref ZoneAwarenessEnabled
      dType: !Ref DeploymentType

  CustomElasticsearchDomainFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          var AWS = require('aws-sdk')
          var response = require('cfn-response')
          var keyId = '6a7ad40f-4265-4a49-99fa-ce6114d49e2f'

          function listKeys(kms,p) {return new Promise(function(res,rej){kms.listKeys(p,function(e,r){return e?rej(e):res(r)})})}
          function createElasticsearchDomain(es,p){return new Promise(function(res,rej){es.createElasticsearchDomain(p,function (e,r){return e?rej(e):res(r)})})}
          function delDomain(es,p) {return new Promise(function(res,rej){es.deleteElasticsearchDomain(p,function(e,r){return e?rej(e):res(r)})})}
          function describeElasticsearchDomain(es,p){return new Promise(function(res,rej){es.describeElasticsearchDomain(p,function(e,r){return e?rej(e):res(r)})})}
          async function getEndpoint(es, p) {
            var t = 880, i = 15 * 1000, w = Date.now() + t * 1000, d = ''
            return new Promise(async function(res, rej) {
              var r
              while (Date.now() < w && !d) {
                await new Promise(function(r){setTimeout(r, i)})
                r = await describeElasticsearchDomain(es, p)
                d = r.DomainStatus.Endpoint
              }
              if(d) {
                res(d)
              } else {
                rej(new Error('timeout'))
              }
            })
          }
          exports.handler = async function(event, context) {
            var es = new AWS.ES({ apiVersion: '2015-01-01' })
            var kms = new AWS.KMS({ apiVersion: '2014-11-01' })
            var props = event.ResourceProperties
            var responseStatus = 'FAILED'
            var responseData = {}
            if (event.RequestType == "Delete") {
              try {
                await delDomain(es, { DomainName: props.dName });
                responseStatus = 'SUCCESS'
              } catch (error) {
                responseData = { Error: error.message }
              }
              return response.send(event, context, responseStatus, responseData)
            }
            var params = {
              DomainName: props.dName,
              ElasticsearchVersion: props.version,
              AdvancedSecurityOptions: {
                Enabled: true,
                InternalUserDatabaseEnabled: true,
                MasterUserOptions: {
                  MasterUserName: props.mUserName,
                  MasterUserPassword: props.mUserPwd
                }
              },
              NodeToNodeEncryptionOptions: {
                Enabled: true
              },
              EncryptionAtRestOptions: {
                Enabled: true
              },
              DomainEndpointOptions: {
                EnforceHTTPS: true,
                TLSSecurityPolicy: 'Policy-Min-TLS-1-0-2019-07'
              },
              ElasticsearchClusterConfig: {
                DedicatedMasterEnabled: false,
                InstanceCount: props.dNodeCnt,
                InstanceType: props.dInstanceType,
                ZoneAwarenessEnabled: props.zAwarenessEnabled === 'true',
                WarmEnabled: false
              },
              EBSOptions: {
                EBSEnabled: true,
                VolumeSize: props.ebsVolSize,
                VolumeType: 'standard'
              }
            }
            if (props.zAwarenessEnabled === 'true') {
              Object.assign(params.ElasticsearchClusterConfig, {
                InstanceCount: 3,
                ZoneAwarenessConfig: {
                  AvailabilityZoneCount: 3
                }
              })
            }
            if (props.dType == 'production') {
              Object.assign(params.ElasticsearchClusterConfig, {
                DedicatedMasterEnabled: true,
                DedicatedMasterCount: props.mNodeCnt,
                DedicatedMasterType: props.mInstanceType
              })
            }
            try {
              var keysList = await listKeys(kms, {})
              if (!keysList.Keys || !keysList.Keys.length) {
                responseData = {Error: "No available KMS keys"}
                return response.send(event, context, responseStatus, responseData)
              }
              var key = keysList.Keys.find(function(key){return key.KeyId===keyId});
              if (!key) {
                responseData = {Error:"Key ("+keyId+") not found"}
                return response.send(event, context, responseStatus, responseData)
              }
              params.EncryptionAtRestOptions.KmsKeyId = key.KeyId
              var result = await createElasticsearchDomain(es,params)
              var endpoint = await getEndpoint(es,{DomainName:props.dName})
              responseStatus = 'SUCCESS'
              responseData = {DomainEndpoint: endpoint}
            } catch (error) {
              console.log('error', error)
              responseData = {Error: error.message}
            }
            return response.send(event, context, responseStatus, responseData, result.DomainStatus.ARN)
          }

      Runtime: nodejs12.x
      Timeout: 900

Outputs:
  DomainEndpoint:
    Description: Endpoint of the created ES domain
    Value: !GetAtt 
      - CustomElasticsearchDomain
      - DomainEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-ESDomainEndPoint'